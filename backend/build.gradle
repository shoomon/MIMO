plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.sonarqube" version "6.0.1.5171"
    id 'checkstyle'
}

group = 'com.bisang'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Redis 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // MySQL 의존성
    runtimeOnly 'com.mysql:mysql-connector-j'
    // H2 데이터베이스
    runtimeOnly 'com.h2database:h2'
    // S3 의존성
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // JPA 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // QueryDSL JPA 의존성 (Jakarta)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    compileOnly 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    compileOnly 'jakarta.annotation:jakarta.annotation-api'
    compileOnly 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Spring Batch 의존성
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // JWT 토큰 관련 설정
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // 암호화 관련 설정
    implementation 'org.mindrot:jbcrypt:0.4'

    // Commons Lang3 설정
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-collections4:4.4'

    // Jackson 의존성 추가
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'
    // Validation 설정 추가
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //webSocket 의존성
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework:spring-messaging'

    // Lombok 의존성
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 테스트 코드 관련 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.23.0'  // AssertJ 추가 (선택적)

    // Redisson 관련 의존성
    implementation 'org.redisson:redisson:3.23.4'

    //openvidu 관련 의존성
    implementation group: 'io.openvidu', name: 'openvidu-java-client', version: '2.31.0'
}

sonar {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property "sonar.projectKey", "5th-project-team_backend"
        property "sonar.organization", "5th-project-team"
        // 자코코 결과 리포트 주소
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/index.xml'
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        // 테스트 커버리지에서 제외할 클래스
        property 'sonar.exclusions', '**/test/**, **/resources/**, **/*Application*.java, **/*Controller*.java, **/*Config.java' +
                '**/*Response.java, **/*Exception.java, **/security/**, **/support/**, **/Q*.java'
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
    }
}

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/config/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${rootDir}/config/naver-checkstyle-suppressions.xml"]
    toolVersion = "8.42"
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.named('test') {
    useJUnitPlatform()
}
